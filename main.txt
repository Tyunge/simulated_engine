--@name simulated engine
--@author Tyunge [ STEAM_0:0:78909614 ]
--@includedir simulated_engine/objects
--@server

dodir("simulated_engine/objects")
wire.adjustInputs({"POD","Engine"},{"wirelink","wirelink"})
wire.adjustOutputs({"Active","Throttle","RPM","Clutch","Gear","Brake"},{"number","number","number","number","number","number"})
if wire.ports.POD == nil or wire.ports.Engine == nil then return end

local ENGINE = {
    idle        = 800,  -- rpm
    redline     = 8000, -- rpm
    pkTorque    = 450,  -- ft-lb
    fwMass      = 5,    -- kg
    
    powerCutOffTime = 0.1, -- seconds
    tqGraph         = {0.4,0.45,0.55,0.7,1,0.9,0.8,0.7}
}

local TRANSMISSION = {
    ratios = {
        [-1] = -3.34,
        [0] = 0,
        [1] = 3.23,
        [2] = 1.950,
        [3] = 1.32,
        [4] = 1.02,
        [5] = 0.95,
        [6] = 0.9
    }
}

local TRANSFERCASE = {
    bias = 0
}

local DIFFERENTIAL = {
    ratio = -4.06
}

local COMPONENTS = {}

local function createComponents(wirelink)
    local entity = wirelink:entity()
    local mdl = entity:getModel()
    local component = nil

    //Engine
    if mdl == "models/sprops/cuboids/height12/size_1/cube_12x18x12.mdl" then
        component = Engine:new(wirelink,ENGINE)
    end
    
    //Transmission    
    if mdl == "models/sprops/cuboids/height06/size_1/cube_6x24x6.mdl" then
        component = Transmission:new(wirelink,TRANSMISSION)
    end
    
    //TransferCase
    if mdl == "models/sprops/cuboids/height06/size_1/cube_6x18x6.mdl" then
        component = TransferCase:new(wirelink,TRANSFERCASE)
    end
    
    //Differential
    if mdl == "models/sprops/cuboids/height06/size_1/cube_6x12x6.mdl" then
        component = Differential:new(wirelink,DIFFERENTIAL)
    end
    
    return component
end


/*
    Unholy abomination of control statements, loops, and inconsistent variable names for automatic component creation & linking
    This wont be needed for addon release.
    
    The point for this is to automatically create the required components that are present in the drive train and link them together appropriatly for 
        AWD, RWD, FWD configurations.
*/
local currentEntity = wire.ports.Engine:entity()
local differentials = {}

while( currentEntity:getClass() != "prop_physics" ) do
    if currentEntity:getWirelink()["Entities"][1]:getClass() == "prop_physics" then break end
    
    local currentComponent =  createComponents(currentEntity:getWirelink())
    table.insert(COMPONENTS, currentComponent)

    
    for index, advEntityMarker_Entity in pairs(currentEntity:getWirelink()["Entities"]) do 
    
        if currentEntity:getClass() != "prop_physics" then
            
            local wirelink = advEntityMarker_Entity:getWirelink()
            local component = createComponents(wirelink)
            
            /*
            if #COMPONENTS > 1 then
                COMPONENTS[#COMPONENTS-1]:linkComponent(COMPONENTS[#COMPONENTS])
                
                print( COMPONENTS[#COMPONENTS-1], COMPONENTS[#COMPONENTS] )
            end
            */
            
            if #COMPONENTS > 1 and COMPONENTS[#COMPONENTS-1].class.name != "TransferCase" then
                //print(COMPONENTS[#COMPONENTS-1], currentComponent)
                COMPONENTS[#COMPONENTS-1]:linkComponent(currentComponent)
            end
                        
            if component.class.name == "Differential" then
                //table.insert(differentials,component)
                table.insert(COMPONENTS,component)
                
                currentComponent:linkComponent(component)
            end
            
        end
    end
    
    
    
    currentEntity = currentEntity:getWirelink()["Entities"][#currentEntity:getWirelink()["Entities"]]
end
table.add(COMPONENTS,differentials)


local sController = Controller:new(wire.ports.POD,COMPONENTS)

hook.add("KeyPress","input",function(ply,key)
    if ply != wire.ports.POD.Driver then return end
    sController:keyPress(key)
end)

hook.add("KeyRelease","release",function(ply,key)
    if ply != wire.ports.POD.Driver then return end
    sController:keyRelease(key)
end)

hook.add("tick","main",function()
    sController:think()
end)