--@name simulated engine
--@author Tyunge [ STEAM_0:0:78909614 ]
--@includedir simulated_engine/objects
--@server

/*
    TODO:
        flywheel energy transfer
        engine, transmission, differential weight calculation
        better rpm deceleration due to engine friction
        transfer cases
        add brakes to differential
        limited slip differential
        fuel
        auto clutching and rev matching
        realstic idle and redline cut off
        engine braking
*/

/*
    This is a very rough idea of how to simulate an engine with realistic torque and ratio values. 
    This currently will not work with AWD vehicles. See simulated_engine/objects/wheel.txt for more info
    
    ALSO this does not simulate torque transfer from the flywheel to the wheels. So revving the engine up to redline and dropping the clutch will not have the desired effects of wheel spin.
    This is because the current clutch only transfers from unloaded RPM to actual RPM. So if the wheels RPM is sitting at 0 and you drop the clutch while the Engine is at peak torque...
    the clutch simply transfers from unloaded RPM torque to loaded RPM torque (which would be 0 because the wheels are not spinning)
    
    ALL TORQUE should be transmitted to the wheels in simulated_engine/objects/engine.txt via the :setInputTorque() for the transmission to maintain realistic and predictable results.
    
    NOTE: to ensure that this code works, place the entire simulated_engine folder into your ../data/starfall folder. Also make sure to remove the sample dupefile when placing into the data folder. 
        Structure should look like the following:
            .../data/starfall/simulated_engine
    
    NOTE: the dupe file should also go into your advduplicator data folder.
    
    NOTE: I've also added a sample chassis as it does utilize props for the engine, transmission, and differential. So that you can see how it works and should be set up.
*/

/*
    The current ratios and torque values are based on a 2001 Saturn SL2 lol.
    The torque graph for the engine is not though.
*/

wire.adjustInputs({"POD","Engine","Transmission","Differential","Wheels"},{"wirelink","entity","entity","entity","array"})
wire.adjustOutputs({"RPM", "Torque","Gear","Clutch","TransmissionOutputTorque","DifferentialTorque"},{"number","number","number","number","number","number"})
allInputsWired = true

//Check if everything is wired.
for k, v in pairs(wire.getInputs(chip())) do
    if wire.ports[v] == nil then allInputsWired = false return end
    if type(wire.ports[v]) != "table" and not wire.ports[v]:isValid() then allInputsWired = false return end
end

if not allInputsWired then return end

dodir("simulated_engine/objects")
local wheels = {}

local ratios = {
    [-1] = 2.923,
    [0] = 0,
    [1] = 3.250,
    [2] = 1.950,
    [3] = 1.172,
    [4] = 0.811,
    [5] = 0.605
}

local final = 4.063

//Create the wheel objects
for k, v in pairs(wire.ports.Wheels) do
    local newWheel = Wheel:new(v)
    table.insert(wheels,newWheel)
end

local pod = wire.ports.POD

//Creating the objects
local sEngine = Engine:new(wire.ports.Engine, 800, 8000, 122, 5)
local sTransmission = Transmission:new(wire.ports.Transmission,ratios)
local sDifferential = Differential:new(wire.ports.Differential,final)

sEngine:linkObject(sTransmission)
sTransmission:linkObject(sDifferential)
sDifferential:linkObject(wheels)


//Basic ECU controls
hook.add("KeyPress","btnPress",function(ply,key)
    if ply != pod.Driver then return end
    
    if key == 1 then
        sTransmission:gearUp()
    end
    
    if key == 2048 then
        sTransmission:gearDown()
    end
end)


hook.add("tick","main",function()
    sEngine:think()
    sTransmission:think()
    sDifferential:think()
    
    sEngine:setThrottle(pod.W)
    
    sTransmission:setClutch( math.approach(sTransmission:getClutch(), pod.Shift, 0.1) )
    
    
    wire.ports.Torque = sEngine:getOutputTorque()
    wire.ports.RPM = sEngine:getRPM()
    wire.ports.Gear = sTransmission:getGear()
    wire.ports.Clutch = sTransmission:getClutch()
    wire.ports.TransmissionOutputTorque = sTransmission:getOutputTorque()
    wire.ports.DifferentialTorque = sDifferential:getOutputTorque()
end)