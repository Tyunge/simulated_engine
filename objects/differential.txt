--@name differential
--@author Tyunge [ STEAM_0:0:78909614 ]
--@include simulated_engine/objects/component.txt
--@server
dofile("simulated_engine/objects/component.txt")

Differential = class("Differential",Component)
function Differential:initialize(wirelink, config)
    self.wirelink = wirelink
    self.entity = self.wirelink:entity()
    self.config = config
    self.brakeNM = brakeNM or 800
    self.components = {}
    
    self.inputTorque = 0
    self.outputTorque = 0
    
    self.brake = 0
    self.brakePower = 0
    
    self.gearRPM = 0
    
    self.parentEntity = self.entity:getParent()
    
    for k, v in pairs(self.wirelink["Entities"]) do
        local sWheel = Wheel:new(v)
        table.insert(self.components,sWheel)
    end
      
    /*EXPERIMENTAL*/
    self.rpm = 0 
end

/*
    Basic Open Differential
    
    How it works:
        Grab the torque from the transmission and multiply it by the ratio and divide it by the number of wheels connected. (usually 2)
        
        Calculate average wheel rpm and multiply it by the ratio then store the value (self.gearRPM)
        The transmission will then take the gear rpm and multiply it again by its ratio and store the value again for its gear RPM

*/

function Differential:think()
    self.outputTorque = (self.inputTorque*self.config.ratio)/#self:getComponents()
    
    
    local wheelRPM = 0
    for k, wh in pairs(self:getComponents()) do
        
        local angleVelocity = wh:getAngleVelocity():dot(Vector(0,1,0))
        
        self.brakePower = self.brake*self.brakeNM
        
        local axis = wh:getEntity():localToWorld(Vector(0,1,0))-wh:getEntity():getPos()//wh:getEntity():worldToLocal(Vector(0,1,0)+wh:getPos())
        
        
        if self.brake > 0 then
            wh:getEntity():setAngleVelocity( Vector(0,wh:getEntity():getAngleVelocity().y/1.25,0) )
        end
        //wh:applyTorque( math.sign(angleVelocity)*axis*self.brakePower ) 
        
        wh:applyTorque( self.entity:getForward()*self.outputTorque)
   
        
        local rpm = math.abs(angleVelocity)/6 //math.abs(wh:getAngleVelocity():dot(Vector(0,1,0))) / 6

        
        wheelRPM = wheelRPM + rpm
    end
    wheelRPM = wheelRPM/#self:getComponents()
    
    
    if self.parentEntity != nil then
        self.parentEntity:applyTorque( self.entity:getForward() * self.outputTorque*#self:getComponents() )
    end
    
    self.gearRPM = wheelRPM*math.abs(self.config.ratio)

end

function Differential:setRPM(num)
    self.rpm = num
    
    local temp = {-1,1}
    
    for k, wh in pairs(self:getComponents()) do
        local entity = wh:getEntity()
        local rpm = math.abs(wh:getAngleVelocity():dot(Vector(0,1,0)))/6
        
        local difference = self.rpm-rpm
        
        entity:addAngleVelocity( Vector(0,temp[k],0)*difference )
    end
end


function Differential:setBrake(num)
    self.brake = math.clamp(num,0,1)
end

function Differential:setInputTorque(num)
    self.inputTorque = num
end

function Differential:getBrake()
    return self.brake
end

function Differential:getOutputTorque()
    return self.outputTorque
end

function Differential:getGearRPM()
    return self.gearRPM
end