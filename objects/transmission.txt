--@name transmission
--@author Tyunge [ STEAM_0:0:78909614 ]
--@include simulated_engine/objects/component.txt
--@server
dofile("simulated_engine/objects/component.txt")

Transmission = class("Transmission",Component)
function Transmission:initialize(wirelink, config)
    self.wirelink = wirelink
    self.entity = self.wirelink:entity()
    self.config = config
    self.components = {}
    
    self.clutch = 0
    self.gear = 0
    self.ratio = 0
    self.inputTorque = 0
    self.outputTorque = 0
    self.gearRPM = 0   
    
    self.shiftTime = 0.15 //in seconds
    self.shiftCt = 0
    self.isChangingGears = false
    
    /* EXPERIMENTAL */
    self.rpm = 0
end

function Transmission:think()
    local differential = self:getComponents()[1]
    local ct = timer.curtime()

    self.ratio = self.config.ratios[self.gear]
    self.outputTorque = self.inputTorque*self.ratio*(1-self.clutch) 
        

    differential:setInputTorque(self.outputTorque)

    
    //This gets input RPM of the differential and multiplies it by the current ratio
    self.gearRPM = differential:getGearRPM()*math.abs(self.ratio)
end

function Transmission:inGear()
    return math.sign( math.abs( self.gear ) ) == 1
end

function Transmission:clutchEngaged()
    return math.floor(self.clutch) == 0
end

/* Getters */
function Transmission:getEntity()
    return self.entity
end

function Transmission:getRatios()
    return self.ratios
end

function Transmission:getClutch()
    return self.clutch
end

function Transmission:getGear()
    return self.gear
end

function Transmission:getRatio()
    return self.ratio
end

function Transmission:getInputTorque()
    return self.inputTorque
end

function Transmission:getOutputTorque()
    return self.outputTorque
end

function Transmission:getGearRPM()
    return self.gearRPM
end

function Transmission:changingGears()
    return self.isChangingGears
end


/* Setters */

function Transmission:setInputTorque(num)
    self.inputTorque = num
end

function Transmission:setClutch(num)
    local ct = timer.curtime()
    
    if ct < self.shiftCt+self.shiftTime then
        self.isChangingGears = true
        //self.clutch = 1
    else
        self.clutch = math.clamp(num,0,1)
        self.isChangingGears = false
    end
    
end

function Transmission:gearUp()
    local ratios = self.config.ratios
    local minimumRatioIndex = #ratios-(table.count(ratios)-1)
    self.gear = math.clamp(self.gear+1, minimumRatioIndex, #ratios)
    
    self.shiftCt = timer.curtime()

end

function Transmission:gearDown()
    local ratios = self.config.ratios
    local minimumRatioIndex = #ratios-(table.count(ratios)-1)
    self.gear = math.clamp(self.gear-1, minimumRatioIndex, #ratios)
    self.shiftCt = timer.curtime()
end

function Transmission:setGear(num)
    local ratios = self.config.ratios
    local minimumRatioIndex = #ratios-(table.count(ratios)-1)
    self.gear = math.clamp(num, minimumRatioIndex, #ratios)
end

